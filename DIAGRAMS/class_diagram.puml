@startuml
skinparam classAttributeIconSize 0
Title: Recipe Roulette Class Diagram

package "App" {

    class Main {
        - UserInterface UI
        - ServerProxy serverProxy
        - NotificationManager notificationManager
        +Main()
        +initialize()
        +shutdown()
        +startApplication()
        +handleUserInput()
        +loadData()
        +saveData()
    }

    class UserInterface {
        -String currentPage
        -User currentUser
        -HashMap<String, UserInput> userInputFields
        -HashMap<String, Component> components
        + renderHomeScreen()
        + renderLoginScreen()
        + renderUserProfile()
        + renderSearchPage()
        + renderRecipeSearchResults(recipes: Recipe[])
        + updateUserInfo()
        + showRecipeDetails(recipe: Recipe)
        + showFilteredRecipes(filter: Filter)
        + handleErrorMessages()
    }

    class ServerProxy {
        - APIProxy apiProxy
        - LocalDatabase localDatabase
        + sendRequest(request: Request)
        + receiveResponse(response: Response)
        + initialize()
        + shutdown()
        + syncDataWithServer()
        + handleServerError()
    }


class LocalDatabase {
        -String databaseName
        -String databaseUrl
    + addRecipe(recipe: Recipe)
    + modifyRecipe(recipe: Recipe)
    + deleteRecipe(recipeID: int)
    + searchRecipe(query: String): List<Recipe>
    + connectToDatabase()
    + disconnectDatabase()
    + retrieveRecipeByID(recipeID: int): Recipe
}
class NotificationManager {
    - List<Notification> notifications
    + sendNotification(notification: Notification)
    + scheduleNotification(notification: Notification, dateTime: DateTime)
    + getPendingNotifications(): List<Notification>
    + removeNotification(notificationID: int)
    + markNotificationAsRead(notificationID: int)
}

    Main "1" *-- "1" UserInterface : "has"
    Main "1" *-- "1" ServerProxy : "uses"
    Main "1" *-- "1" NotificationManager : "manages"
    ServerProxy "1" *-- "1" LocalDatabase : "manages"
}

package "Server" {

    class MainServer {
        -String serverName
        -User[] users
        -RecipeDatabase database
        +initializeServer()
        +loadUsers()
        +loadDatabases()
    }


class User {
    +userID: int
    +username: String
    +email: String
    +password: String
    +points: int
    +login(username: String, password: String)
    +deleteProfile(userID: int)
    +searchRecipes(query: String): List<Recipe>
    +uploadRecipe(recipe: Recipe)
    +modifyRecipe(recipeID: int, updatedRecipe: Recipe)
    +saveRecipe(recipeID: int)
    +removeRecipe(recipeID: int)
    +filterRecipes(filter: Filter): List<Recipe>
    +checkRewardStatus(): int
    +receiveNotif(notification: Notification)
}

class Recipe {
    +recipeID: int
    +name: String
    +ingredients: String
    +instructions: String
    +difficultyLevel: String
    +typeOfFood: String
    +timeRequired: int
    +foodType: String
    +dietaryRestrictions: String[]
    +allergies: String[]
    +updateDetails(name: String, ingredients: String, instructions: String, difficultyLevel: 
String, typeOfFood: String, timeRequired: int, foodType: String, dietaryRestrictions: String[], allergies: String[])
    +requestApprovalRecipe()
    +deleteRecipe()
    +createRecipe(name: String, ingredients: String, instructions: String, difficultyLevel:
 String, typeOfFood: String, timeRequired: int, foodType: String, dietaryRestrictions: String[], allergies: String[])
}

    class ContentAdmin {
        +userID: int
        +username: String
        +email: String
        +password: String
        +login()
        +deleteProfile()
        +approveRecipe(recipe: Recipe)
        +rejectRecipe(recipe: Recipe)
        +sendNotif()
        +requestModification(recipeID: int)
    }

    class Notifications {
        +messageID: int
        +senderID: int
        +receiverID: int
        +content: String
        +sendMessage()
    }


class RecipeDatabase {
    -String databaseName
    -String databaseUrl
    +ConnectToDatabase()
    +RetrieveData(): List<Recipe>
    +StoreData(recipe: Recipe)
    +UpdateData(recipe: Recipe)
    +DeleteData(recipeID: int)
    +searchRecipes(filter: Filter): List<Recipe>
}

class NetworkService {
    - String serverUrl
    - boolean isConnected
    + connect(serverUrl: String): boolean
    + disconnect(): boolean
    + sendData(data: String): boolean
    + receiveData(): String
    + isConnected(): boolean
}

    MainServer "1" -- "0..*" User : "manages"
    MainServer "1" -- "0..*" ContentAdmin : "manages"
    User "1" -- "0..*" Recipe : "owns"
    Recipe "1" -right- "0..*" ContentAdmin : "reviewed by"
    Recipe "1" -- "1" RecipeDatabase : "persisted in"
    Notifications "0..*" -- "1" ContentAdmin : "sends"
    Notifications "0..*" -- "1" User : "receives"
    MainServer "1" *-- "1" RecipeDatabase : "uses"
    ServerProxy "1" *-- "1" NetworkService : "communicates with"
    NetworkService "1" *-- "1" MainServer : "connects to"
}

@enduml
